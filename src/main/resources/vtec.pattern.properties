## config file, vtec.pattern.properties, suggested usage in java being
#
# String regexForVTEC = new  org.apache.commons.configuration.
#                            PropertiesConfiguration("vtec.pattern.properties").getString("vtec.pattern")
#
#  This pattern identifies any number of /P-VTEC/ elements, each possibly followed by an optional /H-VTEC/. 
#  Tested at http://myregexp.com/signedJar.html using full length NWS Weather Bulletins http://www.nws.noaa.gov/view/national.php?prodtype=allwarnings 
#  
#  Natural language description of the VTEC Regex is as follows - start with P-VTEC which starts with a
#    Forward slash character, followed by
#    Product Class code - O, T, E or X, followed by dot, followed by
#    Action code - NEW, CON, etc, followed by dot, followed by 
#    Office ID - a size 1 to 4 (or exact 4?) upper case code, followed by dot, followed by 
#    Phenomena Code - two upper case characters, followed by dot, followed by 
#    Significance character W, A, Y, S, F, O, N, followed by dot, followed by
#    Event tracking number - exactly four digits, followed by dot, followed by
#    Begin Date - exactly six digits, followed by T, followed by exactly four digits, followed by Z, 
#                 followed by DASH (not dot), followed by
#    End Date - exactly six digits, followed by T, followed by exactly four digits, followed by Z, followed by
#    Forward slash character, optionally (hence open parentheses) followed by a child H-VTEC element after 
#       any number of characters that are NOT a forward slash, followed by a 
#       Forward Slash, followed by
#       NWS Location Identifier of exactly 5 characters length followed by dot, followed by
#       Flood Severity - N, 0-3, U followed by dot, followed by
#       Immediate Cause - a two upper-case character code followed by dot, followed by
#       three dot separated Zulu date fields as followed by 
#       Flood Record Status \u2013 NO, NR, UU, OO followed by forward slash followed by 
#       close parentheses to close the optional H-VTEC regular expression followed by 
#       question mark (?) to signify optional H-VTEC pattern 
#
#   Notes:
#   
#   The logic, "any number of characters that are not a forward slash", expressed in regex as [^/]* 
#   is critical to ensuring parent-child relation between H-VTEC and the immediately preceding P-VTEC 
#   (and not any preceding P-VTEC).
#
#   Phenomena and Immediate Cause codes are modeled as any two letter upper-case, to improve readability, 
#   should be good enough \u2013 but can be made more exact by creating character alternation regular expression 
#   classes, (AF|AS|...|ZR) and (ER|...|UU), respectively.
#
#   CAUTION :   Must escape the backslash for java.lang.String e.g. not \w metacharater, but \\w instead.  
#   When testing at, say, myregexp.com, or using another programming language like Perl, restore the \w 
#   metacharacters in the java string below...(thanks to User Suamere on Stackoverflow for some refinements).  
#
#   The "pure" regular expression: 
#
#   /[OTEX]\.(NEW|CON|EXT|EXA|EXB|UPG|CAN|EXP|COR|ROU)\.\w{1,4}\.[A-Z]{2}\.[WAYSFON]\.\d{4}\.\d{6}T\d{4}Z-\d{6}T\d{4}Z/([^/]*/\w{5}\.[N0-3U]\.[A-Z]{2}\.\d{6}T\d{4}Z\.\d{6}T\d{4}Z\.\d{6}T\d{4}Z\.(NO|NR|UU|OO)/)?
#
#   The regular expression for consumption as a java String needs to be modified from above in two ways: 
#      1) all the backslashes in the original expression escaped) -- AND, because we are loading regex from a properties file, 
#      2) the comma also has to be escaped as well, otherwise the regexForVTEC variable will truncate at the comma, throwing a pattern compile error  
#         java.util.regex.PatternSyntaxException: Unclosed counted closure near index 56
#          /[OTEX]\.(NEW|CON|EXT|EXA|EXB|UPG|CAN|EXP|COR|ROU)\.\w{1
#/
vtec.pattern=/[OTEX]\\.(NEW|CON|EXT|EXA|EXB|UPG|CAN|EXP|COR|ROU)\\.\\w{1\,4}\\.[A-Z]{2}\\.[WAYSFON]\\.\\d{4}\\.\\d{6}T\\d{4}Z-\\d{6}T\\d{4}Z/([^/]*/\\w{5}\\.[NU0-3]\\.[A-Z]{2}\\.\\d{6}T\\d{4}Z\\.\\d{6}T\\d{4}Z\\.\\d{6}T\\d{4}Z\\.(NO|NR|UU|OO)/)?
